name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci

      - name: Run tests
        working-directory: apps/frontend
        run: npm test -- --run

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements.txt

      - name: Install dependencies
        working-directory: apps/backend
        run: pip install -r requirements.txt

      - name: Run tests
        working-directory: apps/backend
        run: pytest test_app.py -v

  build-containers:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend container
        working-directory: apps/backend
        run: docker build -t cuddly-disco-backend .

      - name: Build frontend container
        working-directory: apps/frontend
        run: docker build -f Dockerfile.prod -t cuddly-disco-frontend .

      - name: Save backend image
        run: docker save cuddly-disco-backend -o backend-image.tar

      - name: Save frontend image
        run: docker save cuddly-disco-frontend -o frontend-image.tar

      - name: Upload backend image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar
          retention-days: 1

      - name: Upload frontend image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar
          retention-days: 1

  container-tests:
    name: Container Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, build-containers]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Download frontend image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load backend image
        run: docker load -i backend-image.tar

      - name: Load frontend image
        run: docker load -i frontend-image.tar

      - name: Run backend container
        run: docker run -d -p 5000:5000 --name backend cuddly-disco-backend

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/health > /dev/null; then
              echo "Backend is ready!"
              exit 0
            fi
            echo "Attempt $i: Backend not ready yet..."
            sleep 1
          done
          echo "Backend failed to start"
          exit 1

      - name: Test backend container
        run: bash .github/scripts/test-backend-container.sh

      - name: Run frontend container
        run: |
          docker run -d -p 3000:80 \
            -e VITE_LOCATION="CI Test" \
            -e VITE_BACKEND_URL="http://localhost:5000" \
            --name frontend \
            cuddly-disco-frontend

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Frontend is ready!"
              exit 0
            fi
            echo "Attempt $i: Frontend not ready yet..."
            sleep 1
          done
          echo "Frontend failed to start"
          exit 1

      - name: Test frontend container
        run: bash .github/scripts/test-frontend-container.sh

      - name: Show backend logs on failure
        if: failure()
        run: docker logs backend

      - name: Show frontend logs on failure
        if: failure()
        run: docker logs frontend

      - name: Cleanup containers
        if: always()
        run: |
          docker stop backend frontend || true
          docker rm backend frontend || true

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, container-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      released: ${{ steps.semantic.outputs.new_release_published }}
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current latest tag before running semantic-release
          BEFORE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          # Run semantic-release
          npx semantic-release

          # Get latest tag after semantic-release
          AFTER_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          # Check if a new release was created by comparing tags
          if [ "$BEFORE_TAG" != "$AFTER_TAG" ] && [ "$AFTER_TAG" != "none" ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$AFTER_TAG" >> $GITHUB_OUTPUT
            echo "âœ… New release created: $AFTER_TAG"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "No new release created"
          fi

  publish-images:
    name: Publish Container Images
    runs-on: ubuntu-latest
    needs: [build-containers, semantic-release]
    if: needs.semantic-release.outputs.released == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Download frontend image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load backend image
        run: docker load -i backend-image.tar

      - name: Load frontend image
        run: docker load -i frontend-image.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push backend image
        env:
          VERSION: ${{ needs.semantic-release.outputs.version }}
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        run: |
          # Tag with version
          docker tag cuddly-disco-backend ${REGISTRY}/${IMAGE_NAME}/backend:${VERSION}
          docker tag cuddly-disco-backend ${REGISTRY}/${IMAGE_NAME}/backend:latest

          # Push both tags
          docker push ${REGISTRY}/${IMAGE_NAME}/backend:${VERSION}
          docker push ${REGISTRY}/${IMAGE_NAME}/backend:latest

      - name: Tag and push frontend image
        env:
          VERSION: ${{ needs.semantic-release.outputs.version }}
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        run: |
          # Tag with version
          docker tag cuddly-disco-frontend ${REGISTRY}/${IMAGE_NAME}/frontend:${VERSION}
          docker tag cuddly-disco-frontend ${REGISTRY}/${IMAGE_NAME}/frontend:latest

          # Push both tags
          docker push ${REGISTRY}/${IMAGE_NAME}/frontend:${VERSION}
          docker push ${REGISTRY}/${IMAGE_NAME}/frontend:latest
